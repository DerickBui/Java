/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode mergedList = null;
        ListNode startNode;
        
        //base case
        if ((l1 == null) && (l2 == null)) {
            return null;
        }
        else if (l1 == null) {
            return l2;
        }
        else if (l2 == null) {
            return l1;
        }
        
        //start of mergedList
        if (l1.val <= l2.val) {
            mergedList = new ListNode(l1.val);
            startNode = mergedList;
            l1 = l1.next;
        }
        else {
            mergedList = new ListNode(l2.val);
            startNode = mergedList;
            l2 = l2.next;
        }
        
        //while both listnodes are not null
        while ((l1 != null) && (l2 != null)) {
            if (l1.val <= l2.val) {
                mergedList.next = new ListNode(l1.val);
                mergedList = mergedList.next;
                l1 = l1.next;
            }
            else {
                mergedList.next = new ListNode(l2.val);
                mergedList = mergedList.next;
                l2 = l2.next;
            }
        }
        
        // Left over l1
        while (l1 != null) {
            mergedList.next = new ListNode(l1.val);
            mergedList = mergedList.next;
            l1 = l1.next;
        }
        
        // Left over l2
        while (l2 != null) {
            mergedList.next = new ListNode(l2.val);
            mergedList = mergedList.next;
            l2 = l2.next;
        }
        
        return startNode;
    }
}


// class Solution {
//     public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
//         ListNode mergedList = null;
        
//         //start of mergedList
//         if (l1.val <= l2.val) {
//             mergedList = l1;
//         }
//         else {
//             mergedList = l2;
//         }
        
//         //while both listnodes are not null
//         while ((l1 != null) && (l2 != null)) {
//             if (l1.val < l2.val) {
//                 ListNode tempNext = l1.next;
                
//                 System.out.println("yes 1 " + l1.val);
                
//                 l1.next = l2;
//                 l1 = tempNext;
//             }
//             else if (l1.val > l2.val) {
//                 ListNode tempNext = l2.next;
                
//                 System.out.println("yes 2 " + l2.val);
                
//                 l2.next = l1;
//                 l2 = tempNext;
//             }
//             else {
//                 ListNode tempNext = l1.next;
                
//                 System.out.println("yes3");
                
//                 l1.next = l2;
//                 l1 = tempNext;
                
//                 tempNext = l2.next;
//                 l2.next = l1;
//                 l2 = tempNext;
//             }
//         }
        
//         return mergedList;
//     }
// }
