/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode finalList = new ListNode();
        ListNode rFinalList = finalList;
        
        boolean digitIsTens = false;
        
        if ((l1 == null) && (l2 == null)) {
            return null;
        }
        
        while ((l1 != null) && (l2 != null)) {
            int digitSum = l1.val + l2.val;
            
            if (digitIsTens == true) {
                digitIsTens = false;
                digitSum += 1;
            }
            
            if (digitSum >= 10) {
                digitIsTens = true;
                digitSum -= 10;
            }
            
            finalList.val = digitSum;
            
            if ((l1.next != null) || (l2.next != null)) {
                finalList.next = new ListNode();
                finalList = finalList.next;
            }
            
            if ((l1.next == null) && (l2.next == null) && (digitIsTens == true)) {
                finalList.next = new ListNode(1);
            }
            
            l1 = l1.next;
            l2 = l2.next;
        }
        
        while (l1 != null) {
            finalList.val = l1.val;
            
            if (digitIsTens == true) {
                digitIsTens = false;
                finalList.val += 1;
            }
            
            if (finalList.val >= 10) {
                finalList.val -= 10;
                digitIsTens = true;
            }
            
            if (l1.next != null) {
                finalList.next = new ListNode();
                finalList = finalList.next;
            }
            else if (digitIsTens == true) {
                finalList.next = new ListNode(1);
            }
            l1 = l1.next;
        }
        
        while (l2 != null) {
            finalList.val = l2.val;
            
            if (digitIsTens == true) {
                digitIsTens = false;
                finalList.val += 1;
            }
            
            if (finalList.val >= 10) {
                finalList.val -= 10;
                digitIsTens = true;
            }
            
            if (l2.next != null) {
                finalList.next = new ListNode();
                finalList = finalList.next;
            }
            else if (digitIsTens == true) {
                finalList.next = new ListNode(1);
            }
            l2 = l2.next;
        }
        
        return rFinalList;
    }
}
