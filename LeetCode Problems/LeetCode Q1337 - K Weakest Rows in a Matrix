class Solution {
    public int[] kWeakestRows(int[][] mat, int k) {
        int[] order = new int[k];
        int[][] rowAmount = new int[mat.length][2]; //[row][value,index]
        
        if (mat.length == 0 || k == 0) {
            return order;
        }
        
        if (mat.length == 1 && k > 2) {
            order[0] = 0;
            return order;
        }
        
        for (int i = 0; i < mat.length; i++) {
            int[] row = {0,i}; //[value][index]
            for (int j = 0; j < mat[0].length; j++) {
                if (mat[i][j] == 1) {
                    row[0]++;
                }
            }
            rowAmount[i] = row;
        }
        
        Arrays.sort(rowAmount, (a, b) -> {
            if (a[0] == b[0]) return a[1] - b[1];
            else return a[0] - b[0];
        });
        
        for (int i = 0; i < k; i++) {
            order[i] = rowAmount[i][1];
        }
        
        return order;
    }
}
